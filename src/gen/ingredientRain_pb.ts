// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file ingredientRain.proto (package rpc.ingredientRain.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message rpc.ingredientRain.v1.Ingredient
 */
export class Ingredient extends Message<Ingredient> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string titile = 2;
   */
  titile = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string uuid = 7;
   */
  uuid = "";

  constructor(data?: PartialMessage<Ingredient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.Ingredient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "titile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
    { no: 7, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ingredient {
    return new Ingredient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ingredient {
    return new Ingredient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ingredient {
    return new Ingredient().fromJsonString(jsonString, options);
  }

  static equals(a: Ingredient | PlainMessage<Ingredient> | undefined, b: Ingredient | PlainMessage<Ingredient> | undefined): boolean {
    return proto3.util.equals(Ingredient, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.IngredientOnDb
 */
export class IngredientOnDb extends Message<IngredientOnDb> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string titile = 2;
   */
  titile = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<IngredientOnDb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.IngredientOnDb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "titile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientOnDb {
    return new IngredientOnDb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientOnDb {
    return new IngredientOnDb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientOnDb {
    return new IngredientOnDb().fromJsonString(jsonString, options);
  }

  static equals(a: IngredientOnDb | PlainMessage<IngredientOnDb> | undefined, b: IngredientOnDb | PlainMessage<IngredientOnDb> | undefined): boolean {
    return proto3.util.equals(IngredientOnDb, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.StreamIngredientRequest
 */
export class StreamIngredientRequest extends Message<StreamIngredientRequest> {
  constructor(data?: PartialMessage<StreamIngredientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.StreamIngredientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamIngredientRequest {
    return new StreamIngredientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamIngredientRequest {
    return new StreamIngredientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamIngredientRequest {
    return new StreamIngredientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamIngredientRequest | PlainMessage<StreamIngredientRequest> | undefined, b: StreamIngredientRequest | PlainMessage<StreamIngredientRequest> | undefined): boolean {
    return proto3.util.equals(StreamIngredientRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.StreamIngredientResponse
 */
export class StreamIngredientResponse extends Message<StreamIngredientResponse> {
  /**
   * @generated from field: repeated rpc.ingredientRain.v1.Ingredient ingredients = 1;
   */
  ingredients: Ingredient[] = [];

  constructor(data?: PartialMessage<StreamIngredientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.StreamIngredientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredients", kind: "message", T: Ingredient, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamIngredientResponse {
    return new StreamIngredientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamIngredientResponse {
    return new StreamIngredientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamIngredientResponse {
    return new StreamIngredientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamIngredientResponse | PlainMessage<StreamIngredientResponse> | undefined, b: StreamIngredientResponse | PlainMessage<StreamIngredientResponse> | undefined): boolean {
    return proto3.util.equals(StreamIngredientResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.GetIngredientListRequest
 */
export class GetIngredientListRequest extends Message<GetIngredientListRequest> {
  constructor(data?: PartialMessage<GetIngredientListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.GetIngredientListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIngredientListRequest {
    return new GetIngredientListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIngredientListRequest {
    return new GetIngredientListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIngredientListRequest {
    return new GetIngredientListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIngredientListRequest | PlainMessage<GetIngredientListRequest> | undefined, b: GetIngredientListRequest | PlainMessage<GetIngredientListRequest> | undefined): boolean {
    return proto3.util.equals(GetIngredientListRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.GetIngredientListResponse
 */
export class GetIngredientListResponse extends Message<GetIngredientListResponse> {
  /**
   * @generated from field: repeated rpc.ingredientRain.v1.Ingredient ingredients = 1;
   */
  ingredients: Ingredient[] = [];

  constructor(data?: PartialMessage<GetIngredientListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.GetIngredientListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredients", kind: "message", T: Ingredient, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIngredientListResponse {
    return new GetIngredientListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIngredientListResponse {
    return new GetIngredientListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIngredientListResponse {
    return new GetIngredientListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIngredientListResponse | PlainMessage<GetIngredientListResponse> | undefined, b: GetIngredientListResponse | PlainMessage<GetIngredientListResponse> | undefined): boolean {
    return proto3.util.equals(GetIngredientListResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.CreateIngredientRequest
 */
export class CreateIngredientRequest extends Message<CreateIngredientRequest> {
  /**
   * @generated from field: rpc.ingredientRain.v1.Ingredient ingredient = 1;
   */
  ingredient?: Ingredient;

  constructor(data?: PartialMessage<CreateIngredientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.CreateIngredientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "message", T: Ingredient },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIngredientRequest {
    return new CreateIngredientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIngredientRequest {
    return new CreateIngredientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIngredientRequest {
    return new CreateIngredientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIngredientRequest | PlainMessage<CreateIngredientRequest> | undefined, b: CreateIngredientRequest | PlainMessage<CreateIngredientRequest> | undefined): boolean {
    return proto3.util.equals(CreateIngredientRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.CreateIngredientResponse
 */
export class CreateIngredientResponse extends Message<CreateIngredientResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<CreateIngredientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.CreateIngredientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIngredientResponse {
    return new CreateIngredientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIngredientResponse {
    return new CreateIngredientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIngredientResponse {
    return new CreateIngredientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIngredientResponse | PlainMessage<CreateIngredientResponse> | undefined, b: CreateIngredientResponse | PlainMessage<CreateIngredientResponse> | undefined): boolean {
    return proto3.util.equals(CreateIngredientResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.UpdateIngredientRequest
 */
export class UpdateIngredientRequest extends Message<UpdateIngredientRequest> {
  /**
   * @generated from field: rpc.ingredientRain.v1.Ingredient ingredient = 1;
   */
  ingredient?: Ingredient;

  constructor(data?: PartialMessage<UpdateIngredientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.UpdateIngredientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingredient", kind: "message", T: Ingredient },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIngredientRequest {
    return new UpdateIngredientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIngredientRequest {
    return new UpdateIngredientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIngredientRequest {
    return new UpdateIngredientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIngredientRequest | PlainMessage<UpdateIngredientRequest> | undefined, b: UpdateIngredientRequest | PlainMessage<UpdateIngredientRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIngredientRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.UpdateIngredientResponse
 */
export class UpdateIngredientResponse extends Message<UpdateIngredientResponse> {
  constructor(data?: PartialMessage<UpdateIngredientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.UpdateIngredientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIngredientResponse {
    return new UpdateIngredientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIngredientResponse {
    return new UpdateIngredientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIngredientResponse {
    return new UpdateIngredientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIngredientResponse | PlainMessage<UpdateIngredientResponse> | undefined, b: UpdateIngredientResponse | PlainMessage<UpdateIngredientResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIngredientResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.DeleteIngredientRequest
 */
export class DeleteIngredientRequest extends Message<DeleteIngredientRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteIngredientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.DeleteIngredientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIngredientRequest {
    return new DeleteIngredientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIngredientRequest {
    return new DeleteIngredientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIngredientRequest {
    return new DeleteIngredientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIngredientRequest | PlainMessage<DeleteIngredientRequest> | undefined, b: DeleteIngredientRequest | PlainMessage<DeleteIngredientRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIngredientRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.DeleteIngredientResponse
 */
export class DeleteIngredientResponse extends Message<DeleteIngredientResponse> {
  constructor(data?: PartialMessage<DeleteIngredientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.DeleteIngredientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIngredientResponse {
    return new DeleteIngredientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIngredientResponse {
    return new DeleteIngredientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIngredientResponse {
    return new DeleteIngredientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIngredientResponse | PlainMessage<DeleteIngredientResponse> | undefined, b: DeleteIngredientResponse | PlainMessage<DeleteIngredientResponse> | undefined): boolean {
    return proto3.util.equals(DeleteIngredientResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.Recipe
 */
export class Recipe extends Message<Recipe> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string recipe_url = 3;
   */
  recipeUrl = "";

  /**
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  /**
   * @generated from field: bool pickup = 5;
   */
  pickup = false;

  /**
   * @generated from field: string nickname = 6;
   */
  nickname = "";

  /**
   * @generated from field: string materials = 7;
   */
  materials = "";

  /**
   * @generated from field: repeated int64 material_ids = 8;
   */
  materialIds: bigint[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp publishday = 9;
   */
  publishday?: Timestamp;

  /**
   * @generated from field: int64 rank = 10;
   */
  rank = protoInt64.zero;

  /**
   * @generated from field: string recipe_indication = 11;
   */
  recipeIndication = "";

  /**
   * @generated from field: string recipe_cost = 12;
   */
  recipeCost = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 13;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 14;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Recipe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.Recipe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipe_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pickup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "materials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "material_ids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 9, name: "publishday", kind: "message", T: Timestamp },
    { no: 10, name: "rank", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "recipe_indication", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "recipe_cost", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "created_at", kind: "message", T: Timestamp },
    { no: 14, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Recipe {
    return new Recipe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Recipe {
    return new Recipe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Recipe {
    return new Recipe().fromJsonString(jsonString, options);
  }

  static equals(a: Recipe | PlainMessage<Recipe> | undefined, b: Recipe | PlainMessage<Recipe> | undefined): boolean {
    return proto3.util.equals(Recipe, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.RecipeOnDb
 */
export class RecipeOnDb extends Message<RecipeOnDb> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string recipe_url = 3;
   */
  recipeUrl = "";

  /**
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  /**
   * @generated from field: bool pickup = 5;
   */
  pickup = false;

  /**
   * @generated from field: string nickname = 6;
   */
  nickname = "";

  /**
   * @generated from field: string materials = 7;
   */
  materials = "";

  /**
   * @generated from field: string material_ids = 8;
   */
  materialIds = "";

  /**
   * @generated from field: google.protobuf.Timestamp publishday = 9;
   */
  publishday?: Timestamp;

  /**
   * @generated from field: int64 rank = 10;
   */
  rank = protoInt64.zero;

  /**
   * @generated from field: int64 recipe_indication_id = 11;
   */
  recipeIndicationId = protoInt64.zero;

  /**
   * @generated from field: int64 recipe_cost_id = 12;
   */
  recipeCostId = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 13;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 14;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<RecipeOnDb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.RecipeOnDb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipe_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pickup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "materials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "material_ids", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "publishday", kind: "message", T: Timestamp },
    { no: 10, name: "rank", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "recipe_indication_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "recipe_cost_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "created_at", kind: "message", T: Timestamp },
    { no: 14, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecipeOnDb {
    return new RecipeOnDb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecipeOnDb {
    return new RecipeOnDb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecipeOnDb {
    return new RecipeOnDb().fromJsonString(jsonString, options);
  }

  static equals(a: RecipeOnDb | PlainMessage<RecipeOnDb> | undefined, b: RecipeOnDb | PlainMessage<RecipeOnDb> | undefined): boolean {
    return proto3.util.equals(RecipeOnDb, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.GetRecipeListRequest
 */
export class GetRecipeListRequest extends Message<GetRecipeListRequest> {
  constructor(data?: PartialMessage<GetRecipeListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.GetRecipeListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecipeListRequest {
    return new GetRecipeListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecipeListRequest {
    return new GetRecipeListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecipeListRequest {
    return new GetRecipeListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecipeListRequest | PlainMessage<GetRecipeListRequest> | undefined, b: GetRecipeListRequest | PlainMessage<GetRecipeListRequest> | undefined): boolean {
    return proto3.util.equals(GetRecipeListRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.GetRecipeListResponse
 */
export class GetRecipeListResponse extends Message<GetRecipeListResponse> {
  /**
   * @generated from field: repeated rpc.ingredientRain.v1.Recipe Recipes = 1;
   */
  Recipes: Recipe[] = [];

  constructor(data?: PartialMessage<GetRecipeListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.GetRecipeListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Recipes", kind: "message", T: Recipe, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecipeListResponse {
    return new GetRecipeListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecipeListResponse {
    return new GetRecipeListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecipeListResponse {
    return new GetRecipeListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecipeListResponse | PlainMessage<GetRecipeListResponse> | undefined, b: GetRecipeListResponse | PlainMessage<GetRecipeListResponse> | undefined): boolean {
    return proto3.util.equals(GetRecipeListResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.CreateRecipeRequest
 */
export class CreateRecipeRequest extends Message<CreateRecipeRequest> {
  /**
   * @generated from field: rpc.ingredientRain.v1.Recipe Recipe = 1;
   */
  Recipe?: Recipe;

  constructor(data?: PartialMessage<CreateRecipeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.CreateRecipeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Recipe", kind: "message", T: Recipe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecipeRequest {
    return new CreateRecipeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecipeRequest {
    return new CreateRecipeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecipeRequest {
    return new CreateRecipeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecipeRequest | PlainMessage<CreateRecipeRequest> | undefined, b: CreateRecipeRequest | PlainMessage<CreateRecipeRequest> | undefined): boolean {
    return proto3.util.equals(CreateRecipeRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.CreateRecipeResponse
 */
export class CreateRecipeResponse extends Message<CreateRecipeResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<CreateRecipeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.CreateRecipeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecipeResponse {
    return new CreateRecipeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecipeResponse {
    return new CreateRecipeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecipeResponse {
    return new CreateRecipeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecipeResponse | PlainMessage<CreateRecipeResponse> | undefined, b: CreateRecipeResponse | PlainMessage<CreateRecipeResponse> | undefined): boolean {
    return proto3.util.equals(CreateRecipeResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.UpdateRecipeRequest
 */
export class UpdateRecipeRequest extends Message<UpdateRecipeRequest> {
  /**
   * @generated from field: rpc.ingredientRain.v1.Recipe Recipe = 1;
   */
  Recipe?: Recipe;

  constructor(data?: PartialMessage<UpdateRecipeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.UpdateRecipeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Recipe", kind: "message", T: Recipe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecipeRequest {
    return new UpdateRecipeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecipeRequest {
    return new UpdateRecipeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecipeRequest {
    return new UpdateRecipeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecipeRequest | PlainMessage<UpdateRecipeRequest> | undefined, b: UpdateRecipeRequest | PlainMessage<UpdateRecipeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRecipeRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.UpdateRecipeResponse
 */
export class UpdateRecipeResponse extends Message<UpdateRecipeResponse> {
  constructor(data?: PartialMessage<UpdateRecipeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.UpdateRecipeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecipeResponse {
    return new UpdateRecipeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecipeResponse {
    return new UpdateRecipeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecipeResponse {
    return new UpdateRecipeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecipeResponse | PlainMessage<UpdateRecipeResponse> | undefined, b: UpdateRecipeResponse | PlainMessage<UpdateRecipeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRecipeResponse, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.DeleteRecipeRequest
 */
export class DeleteRecipeRequest extends Message<DeleteRecipeRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteRecipeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.DeleteRecipeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRecipeRequest {
    return new DeleteRecipeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRecipeRequest {
    return new DeleteRecipeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRecipeRequest {
    return new DeleteRecipeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRecipeRequest | PlainMessage<DeleteRecipeRequest> | undefined, b: DeleteRecipeRequest | PlainMessage<DeleteRecipeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRecipeRequest, a, b);
  }
}

/**
 * @generated from message rpc.ingredientRain.v1.DeleteRecipeResponse
 */
export class DeleteRecipeResponse extends Message<DeleteRecipeResponse> {
  constructor(data?: PartialMessage<DeleteRecipeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.ingredientRain.v1.DeleteRecipeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRecipeResponse {
    return new DeleteRecipeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRecipeResponse {
    return new DeleteRecipeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRecipeResponse {
    return new DeleteRecipeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRecipeResponse | PlainMessage<DeleteRecipeResponse> | undefined, b: DeleteRecipeResponse | PlainMessage<DeleteRecipeResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRecipeResponse, a, b);
  }
}

